# Generated by Django 3.2.5 on 2021-11-23 15:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import editor.models

def generic_access(apps, schema_editor):
    ContentType = apps.get_model('contenttypes', 'ContentType')
    ProjectAccess = apps.get_model('editor','ProjectAccess')
    Access = apps.get_model('editor','Access')
    IndividualAccess = apps.get_model('editor','IndividualAccess')
    ThemeAccess = apps.get_model('editor','ThemeAccess')
    ExtensionAccess = apps.get_model('editor','ExtensionAccess')
    CustomPartTypeAccess = apps.get_model('editor','CustomPartTypeAccess')
    TimelineItem = apps.get_model('editor','TimelineItem')

    Project = apps.get_model('editor','Project')
    ct_p = ContentType.objects.get_for_model(Project)
    EditorItem = apps.get_model('editor','EditorItem')
    ct_ei = ContentType.objects.get_for_model(EditorItem)
    Theme = apps.get_model('editor','Theme')
    ct_t = ContentType.objects.get_for_model(Theme)
    Extension = apps.get_model('editor','Extension')
    ct_e = ContentType.objects.get_for_model(Extension)
    CustomPartType = apps.get_model('editor','CustomPartType')
    ct_cpt = ContentType.objects.get_for_model(CustomPartType)

    fix_timeline_items = []

    ct_pa = ContentType.objects.get_for_model(ProjectAccess)
    for pa in ProjectAccess.objects.all():
        ia = IndividualAccess.objects.create(user=pa.user, object_content_type=ct_p, object_id=pa.project.pk, access=pa.access)
        try:
            fix_timeline_items.append((
                TimelineItem.objects.get(object_content_type=ct_pa,object_id=pa.pk),
                ia
            ))
        except TimelineItem.DoesNotExist:
            pass

    ct_ea = ContentType.objects.get_for_model(Access)
    for ea in Access.objects.all():
        ia = IndividualAccess.objects.create(user=ea.user, object_content_type=ct_ei, object_id=ea.item.pk, access=ea.access)
        try:
            fix_timeline_items.append((
                TimelineItem.objects.get(object_content_type=ct_ea,object_id=ea.pk),
                ia
            ))
        except TimelineItem.DoesNotExist:
            pass

    ct_ta = ContentType.objects.get_for_model(ThemeAccess)
    for ta in ThemeAccess.objects.all():
        ia = IndividualAccess.objects.create(user=ta.user, object_content_type=ct_t, object_id=ta.theme.pk, access=ta.access)
        try:
            fix_timeline_items.append((
                TimelineItem.objects.get(object_content_type=ct_ta,object_id=ta.pk),
                ia
            ))
        except TimelineItem.DoesNotExist:
            pass

    ct_ea = ContentType.objects.get_for_model(ExtensionAccess)
    for ea in ExtensionAccess.objects.all():
        ia = IndividualAccess.objects.create(user=ea.user, object_content_type=ct_e, object_id=ea.extension.pk, access=ea.access)
        try:
            fix_timeline_items.append((
                TimelineItem.objects.get(object_content_type=ct_ea,object_id=ea.pk),
                ia
            ))
        except TimelineItem.DoesNotExist:
            pass

    ct_ca = ContentType.objects.get_for_model(CustomPartTypeAccess)
    for ca in CustomPartTypeAccess.objects.all():
        ia = IndividualAccess.objects.create(user=ca.user, object_content_type=ct_cpt, object_id=ca.custom_part_type.pk, access=ca.access)
        try:
            fix_timeline_items.append((
                TimelineItem.objects.get(object_content_type=ct_ca,object_id=ca.pk),
                ia
            ))
        except TimelineItem.DoesNotExist:
            pass

    ct_ia = ContentType.objects.get_for_model(IndividualAccess)
    TimelineItem.objects.filter(object_content_type=ct_ia).delete()

    for i, ia in fix_timeline_items:
        i.object_content_type = ct_ia
        i.object_id = ia.pk
        i.save()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('editor', '0056_auto_20211109_0858'),
    ]

    operations = [
        migrations.CreateModel(
            name='IndividualAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('access', models.CharField(choices=[('view', 'Can view'), ('edit', 'Can edit')], default='view', max_length=6)),
                ('object_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='individual_accesses', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(models.Model, editor.models.TimelineMixin),
        ),
        migrations.CreateModel(
            name='ItemQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('instructions_submitter', models.TextField(blank=True, verbose_name='Instructions for submitters')),
                ('instructions_reviewer', models.TextField(blank=True, verbose_name='Instructions for reviewers')),
                ('public', models.BooleanField(default=False, verbose_name='Visible to everyone?')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='own_queues', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(models.Model, editor.models.ControlledObject),
        ),
        migrations.CreateModel(
            name='ItemQueueChecklistItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=500)),
                ('queue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checklist', to='editor.itemqueue')),
            ],
        ),
        migrations.CreateModel(
            name='ItemQueueChecklistTick',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ItemQueueEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True)),
                ('complete', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queue_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-pk'],
            },
            bases=(models.Model, editor.models.ControlledObject),
        ),
        migrations.RunPython(generic_access, migrations.RunPython.noop),
        migrations.AddField(
            model_name='itemqueueentry',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queue_entries', to='editor.editoritem'),
        ),
        migrations.AddField(
            model_name='itemqueueentry',
            name='queue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='editor.itemqueue'),
        ),
        migrations.AddField(
            model_name='itemqueuechecklisttick',
            name='entry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticks', to='editor.itemqueueentry'),
        ),
        migrations.AddField(
            model_name='itemqueuechecklisttick',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticks', to='editor.itemqueuechecklistitem'),
        ),
        migrations.AddField(
            model_name='itemqueuechecklisttick',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='queue_entry_ticks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='itemqueue',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queues', to='editor.project'),
        ),
    ]
